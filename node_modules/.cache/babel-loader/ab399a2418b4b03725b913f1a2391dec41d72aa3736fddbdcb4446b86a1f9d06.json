{"ast":null,"code":"var _jsxFileName = \"/Users/austin/workmeter/src/pages/AssessmentWizard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ANSWER_OPTIONS } from '../data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentWizard = ({\n  currentAssessment,\n  setCurrentAssessment\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(currentAssessment.currentPage);\n  const navigate = useNavigate();\n  const questionsPerPage = currentAssessment.questionsPerPage;\n  const totalPages = currentAssessment.totalPages;\n\n  // Calculate which questions to show on the current page\n  const startIndex = (currentPage - 1) * questionsPerPage;\n  const endIndex = Math.min(startIndex + questionsPerPage, currentAssessment.questions.length);\n  const currentQuestions = currentAssessment.questions.slice(startIndex, endIndex);\n\n  // Update assessment when changing pages\n  useEffect(() => {\n    setCurrentAssessment({\n      ...currentAssessment,\n      currentPage\n    });\n  }, [currentPage]);\n  const handleAnswerChange = (questionId, answer) => {\n    const updatedQuestions = currentAssessment.questions.map(q => q.id === questionId ? {\n      ...q,\n      answer\n    } : q);\n    setCurrentAssessment({\n      ...currentAssessment,\n      questions: updatedQuestions\n    });\n  };\n  const handleNext = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    } else {\n      // If we're on the last page, go to results\n      navigate('/results');\n    }\n  };\n  const handlePrevious = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n  const canProceed = () => {\n    // Check if all questions on the current page have been answered\n    return currentQuestions.every(q => q.answer !== \"-- SELECT ONE --\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wizard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"page-title text-2xl font-bold\",\n      children: [\"Assessing: \", currentAssessment.showName, currentAssessment.showType && ` (${currentAssessment.showType})`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md p-6 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold\",\n          children: [\"Page \", currentPage, \" of \", totalPages]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-500\",\n          children: [\"Showing questions \", startIndex + 1, \" - \", endIndex, \" of \", currentAssessment.questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), currentQuestions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `question-${question.id}`,\n          className: \"block font-medium mb-2\",\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: `question-${question.id}`,\n          value: question.answer,\n          onChange: e => handleAnswerChange(question.id, e.target.value),\n          className: \"select\",\n          children: ANSWER_OPTIONS.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option,\n            children: option\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wizard-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevious,\n          className: \"btn btn-secondary\",\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: currentPage < totalPages ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNext,\n            className: \"btn btn-primary\",\n            disabled: !canProceed(),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNext,\n            className: \"btn btn-primary\",\n            disabled: !canProceed(),\n            children: \"Finish\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-sm text-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please answer all questions on this page before proceeding.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select \\\"N/A\\\" for any questions that don't apply to the content you're assessing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AssessmentWizard, \"vQOuTJx8k6gontDxPlhEGwfvRiY=\", false, function () {\n  return [useNavigate];\n});\n_c = AssessmentWizard;\nexport default AssessmentWizard;\nvar _c;\n$RefreshReg$(_c, \"AssessmentWizard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","ANSWER_OPTIONS","jsxDEV","_jsxDEV","AssessmentWizard","currentAssessment","setCurrentAssessment","_s","currentPage","setCurrentPage","navigate","questionsPerPage","totalPages","startIndex","endIndex","Math","min","questions","length","currentQuestions","slice","handleAnswerChange","questionId","answer","updatedQuestions","map","q","id","handleNext","handlePrevious","canProceed","every","className","children","showName","showType","fileName","_jsxFileName","lineNumber","columnNumber","question","htmlFor","text","value","onChange","e","target","option","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/austin/workmeter/src/pages/AssessmentWizard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ANSWER_OPTIONS } from '../data';\n\nconst AssessmentWizard = ({ currentAssessment, setCurrentAssessment }) => {\n  const [currentPage, setCurrentPage] = useState(currentAssessment.currentPage);\n  const navigate = useNavigate();\n  \n  const questionsPerPage = currentAssessment.questionsPerPage;\n  const totalPages = currentAssessment.totalPages;\n  \n  // Calculate which questions to show on the current page\n  const startIndex = (currentPage - 1) * questionsPerPage;\n  const endIndex = Math.min(startIndex + questionsPerPage, currentAssessment.questions.length);\n  const currentQuestions = currentAssessment.questions.slice(startIndex, endIndex);\n  \n  // Update assessment when changing pages\n  useEffect(() => {\n    setCurrentAssessment({\n      ...currentAssessment,\n      currentPage\n    });\n  }, [currentPage]);\n  \n  const handleAnswerChange = (questionId, answer) => {\n    const updatedQuestions = currentAssessment.questions.map(q => \n      q.id === questionId ? { ...q, answer } : q\n    );\n    \n    setCurrentAssessment({\n      ...currentAssessment,\n      questions: updatedQuestions\n    });\n  };\n  \n  const handleNext = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    } else {\n      // If we're on the last page, go to results\n      navigate('/results');\n    }\n  };\n  \n  const handlePrevious = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n  \n  const canProceed = () => {\n    // Check if all questions on the current page have been answered\n    return currentQuestions.every(q => q.answer !== \"-- SELECT ONE --\");\n  };\n  \n  return (\n    <div className=\"wizard-container\">\n      <h2 className=\"page-title text-2xl font-bold\">\n        Assessing: {currentAssessment.showName}\n        {currentAssessment.showType && ` (${currentAssessment.showType})`}\n      </h2>\n      \n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-4\">\n        <div className=\"mb-4 flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold\">\n            Page {currentPage} of {totalPages}\n          </h3>\n          <div className=\"text-sm text-gray-500\">\n            Showing questions {startIndex + 1} - {endIndex} of {currentAssessment.questions.length}\n          </div>\n        </div>\n        \n        {currentQuestions.map((question) => (\n          <div key={question.id} className=\"question\">\n            <label htmlFor={`question-${question.id}`} className=\"block font-medium mb-2\">\n              {question.text}\n            </label>\n            <select\n              id={`question-${question.id}`}\n              value={question.answer}\n              onChange={(e) => handleAnswerChange(question.id, e.target.value)}\n              className=\"select\"\n            >\n              {ANSWER_OPTIONS.map(option => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n        ))}\n        \n        <div className=\"wizard-nav\">\n          <button \n            onClick={handlePrevious} \n            className=\"btn btn-secondary\" \n            disabled={currentPage === 1}\n          >\n            Previous\n          </button>\n          \n          <div className=\"text-center\">\n            {currentPage < totalPages ? (\n              <button \n                onClick={handleNext} \n                className=\"btn btn-primary\" \n                disabled={!canProceed()}\n              >\n                Next\n              </button>\n            ) : (\n              <button \n                onClick={handleNext} \n                className=\"btn btn-primary\" \n                disabled={!canProceed()}\n              >\n                Finish\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"text-center text-sm text-gray-500\">\n        <p>Please answer all questions on this page before proceeding.</p>\n        <p>Select \"N/A\" for any questions that don't apply to the content you're assessing.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AssessmentWizard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}